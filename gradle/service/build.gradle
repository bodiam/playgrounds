// Applying plugins from https://plugins.gradle.org.
plugins {
	id 'java'
	id 'osgi'
	id 'jacoco'
	id 'io.spring.dependency-management' version '1.0.3.RELEASE' // Interpolation is not supported yet :(
}

// Maven BOMs supported thanks to Spring!
dependencyManagement {
	imports {
		mavenBom "org.springframework:spring-framework-bom:${springVersion}"
	}
}

sourceSets {
	// Configuring separate source set for functional tests. No more inclusions / exclusions for different types of tests.
	functionalTest {
		java.srcDir file('src/functional-test/java')
		resources.srcDir file('src/functional-test/resources')
	}
}

configurations {
	// Extending functional test classpathes from test. Not very ideomatic, but quick.
	// In a real-world scenario functional tests may not "see" application classes or share dependencies with unit test
	// Functional tests can even use different testing framework, like Spock.
	functionalTestCompile.extendsFrom testCompile
	functionalTestRuntime.extendsFrom testRuntime
}

dependencies {
	compile project(':model')

	compile 'org.springframework:spring-context'
	compile "org.apache.cxf:cxf-rt-frontend-jaxrs:${cxfVersion}"
	compile "org.apache.cxf:cxf-rt-frontend-jaxws:${cxfVersion}"
	compile "com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:${jacksonVersion}"
	compile "io.swagger:swagger-annotations:${swaggerVersion}"

	testCompile "org.testng:testng:${testngVersion}"
	testCompile "org.mockito:mockito-core:${mockitoVersion}"

	// Example of functional test-specific dependency
	functionalTestCompile "org.apache.httpcomponents:httpclient:4.5.3"
	// functionalTestCompile "org.testng:testng:${testngVersion}" when not extending test classpath, dependencies must be repeated.
}

jar {
	// OSGi MANIFEST.MF configuration goes here.
	// Configuration is similar to Maven BND plugin (http://felix.apache
	// .org/documentation/subprojects/apache-felix-maven-bundle-plugin-bnd.html)
	manifest {
		name = 'Playgrounds :: Gradle :: Service'
		symbolicName = 'by.dev.madhead.playgrounds.gradle.service'
		vendor = 'madhead labs'

		instruction('Export-Package', '') // My mother told me not to talk with strangers!
		instruction('Import-Package',
				'com.fasterxml.jackson.jaxrs.json',
				'com.fasterxml.jackson.databind',
				'org.apache.cxf.feature',
				'org.apache.cxf.jaxws',

				'*' // Import all packages referred in the source code. Actually, it's a default value and can be dropped.
		)
	}
}

// Configuring jacocoTestReport task
jacocoTestReport {
	reports {
		html.enabled true
		xml.enabled true
		csv.enabled true
	}
}

test {
	useTestNG() // Enabling TestNG support. Unit testing is not that different from Maven.
}

task functionalTest(type: Test) {
	useTestNG() // Ok, maybe not the best choice for functional tests...

	testClassesDir = sourceSets.functionalTest.output.classesDir
	classpath = sourceSets.functionalTest.runtimeClasspath

	jacoco {
		enabled = false // We don't want to track coverage during functional tests
	}
}

// Integrating integration tests in the build process.
//check.dependsOn functionalTest // We may not want to run functional tests as a part of main task tree
functionalTest.mustRunAfter test // Force ordering. Obviously, unit tests must run before functional tests
